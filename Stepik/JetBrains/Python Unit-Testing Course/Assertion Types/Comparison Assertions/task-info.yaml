type: edu
files:
- name: comparison_assertions.py
  visible: true
  placeholders:
  - offset: 312
    length: 100
    placeholder_text: write this test!
    initial_state:
      length: 16
      offset: 312
    initialized_from_dependency: false
    possible_answer: |-
      for n_attempt in range(100):
                  value = random_not_42()
                  self.assertNotEqual(value, 42)
    selected: true
    status: Solved
  - offset: 1230
    length: 37
    placeholder_text: write this test!
    initial_state:
      length: 16
      offset: 1146
    initialized_from_dependency: false
    possible_answer: self.assertIsNotNone(find_foo('foo'))
    selected: true
    status: Solved
  - offset: 1393
    length: 77
    placeholder_text: write this test!
    initial_state:
      length: 16
      offset: 1288
    initialized_from_dependency: false
    possible_answer: |-
      for s in self.strings_with_foo:
                  self.assertIsNotNone(find_foo(s))
    selected: true
    status: Solved
  - offset: 1591
    length: 85
    placeholder_text: write this test!
    initial_state:
      length: 16
      offset: 1433
    initialized_from_dependency: false
    possible_answer: |-
      for s in self.strings_without_foo:
                  self.assertIsNone(find_foo(s))
    selected: true
    status: Solved
  - offset: 2002
    length: 94
    placeholder_text: check the returned value
    initial_state:
      length: 24
      offset: 1787
    initialized_from_dependency: false
    possible_answer: |-
      self.assertGreaterEqual(value, start)
                  self.assertLessEqual(value, end)
    selected: true
    status: Solved
  - offset: 2440
    length: 72
    placeholder_text: check the returned value
    initial_state:
      length: 24
      offset: 2155
    initialized_from_dependency: false
    possible_answer: |-
      self.assertGreater(value, start)
                  self.assertLess(value, end)
    selected: true
    status: Solved
  text: |
    import random
    import unittest

    from tested_code import random_not_42, find_foo, \
        random_float_between_inclusive, random_float_between_noninclusive


    class TestRandomNot42(unittest.TestCase):
        def test_many_values(self):
            """call the function 100 times and make sure the result isn't 42"""
            write this test!


    class TestFindFoo(unittest.TestCase):
        """tests for the find_foo() function

        find_foo(s) returns an object if "foo" is a sub-string of s,
        and None otherwise.
        """
        # valid_names = [
        #     'foo',
        #     'Bar',
        #     'foorBar',
        #     'foo_bar',
        #     '_fooBar',
        #     'foo1',
        #     'foo_',
        # ]
        #
        # invalid_names = [
        #     '1foo',
        #     'foo-bar',
        #     '$foo',
        #     'foo bar',
        #     'foo+bar4ever',
        # ]

        strings_with_foo = [
            'foo',
            'aaa foo bbb',
            'aaa foo',
            'foo bbb',
            'no foo for you, come back oen year!'
        ]

        strings_without_foo = [
            'boo',
            'aaa bbb',
            'four',
        ]

        def test_identical(self):
            """check that find_foo finds 'foo' in 'foo'"""
            write this test!

        def test_strings_with_foo(self):
            """check that find_foo finds 'foo' in all of the strings with 'foo'"""
            write this test!

        def test_strings_without_foo(self):
            """check that find_foo finds 'foo' in all of the strings with 'foo'"""
            write this test!


    class TestRandomFloatBetweenInclusive(unittest.TestCase):
        def test_random_values(self):
            for i in range(100):
                start = random.random()
                end = random.random()
                if start > end:
                    start, end = end, start
                value = random_float_between_inclusive(start, end)

                check the returned value


    class TestRandomFloatBetweenNoninclusive(unittest.TestCase):
        def test_random_values(self):
            for i in range(100):
                start = random.random()
                end = random.random()
                if start > end:
                    start, end = end, start
                value = random_float_between_noninclusive(start, end)

                check the returned value
  learner_created: false
- name: tested_code.py
  visible: true
  text: |-
    import random
    import re


    def random_not_42():
        value = 42
        while value == 42:
            value = random.randint(-(2 ** 31), 2 ** 31 - 1)
        return value


    def find_foo(s):
        return re.search(r"foo", s)


    def random_float_between_inclusive(a, b):
        return random.uniform(a, b)


    def random_float_between_noninclusive(a, b):
        if a == b:
            raise ValueError("a must be different than b!")
        result = a
        while result == a or result == b:
            result = random.uniform(a, b)
        return result
  learner_created: false
- name: tests.py
  visible: false
  learner_created: false
status: Solved
record: -1
